{"version":3,"sources":["ThreeJS/ThreeJS.jsx","App.js","serviceWorker.js","index.js"],"names":["ThreeJS","scene","THREE","camera","window","innerWidth","innerHeight","renderer","setSize","this","mount","appendChild","domElement","geometry","material","color","cube","add","push","position","z","animate","requestAnimationFrame","rotation","x","y","render","ref","Component","App","className","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mOAmDeA,E,uKA/Cb,WACE,IAAIC,EAAQ,IAAIC,IACZC,EAAS,IAAID,IACf,GACAE,OAAOC,WAAaD,OAAOE,YAC3B,GACA,KAEEC,EAAW,IAAIL,IACnBK,EAASC,QAAQJ,OAAOC,WAAYD,OAAOE,aAG3CG,KAAKC,MAAMC,YAAYJ,EAASK,YAChC,IAAIC,EAAW,IAAIX,IAAkB,EAAG,EAAG,GAavCY,EAAW,IAAIZ,IAAwB,CAAEa,MAAO,QAChDC,EAAO,IAAId,IAAWW,EAAUC,GAIpCb,EAAMgB,IAAID,GAhBE,GAiBNE,KAAKF,GACXb,EAAOgB,SAASC,EAAI,GACN,SAAVC,IACFC,sBAAsBD,GACtBL,EAAKO,SAASC,GAAK,IACnBR,EAAKO,SAASE,GAAK,IACnBlB,EAASmB,OAAOzB,EAAOE,GAEzBkB,K,oBAEF,WAAU,IAAD,OACP,OAAO,yBAAKM,IAAK,SAACA,GAAD,OAAU,EAAKjB,MAAQiB,S,GA5CtBC,a,MCSPC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCZNC,IAAST,OACP,kBAAC,IAAMU,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a5bb8266.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport * as THREE from \"three\";\r\n\r\nclass ThreeJS extends Component {\r\n  componentDidMount() {\r\n    let scene = new THREE.Scene();\r\n    let camera = new THREE.PerspectiveCamera(\r\n      75, // perspective camera view the lower the # will zoom in closer over 200 starts to zoom in\r\n      window.innerWidth / window.innerHeight,\r\n      0.1,\r\n      1000\r\n    );\r\n    let renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    // document.body.appendChild( renderer.domElement );\r\n    // use ref as a mount point of the Three.js scene instead of the document.body\r\n    this.mount.appendChild(renderer.domElement);\r\n    let geometry = new THREE.BoxGeometry(1, 1, 1); // changes the height, width, and length of the 3D object\r\n\r\n    let cubes = []; // just an array we can use to rotate the cubes\r\n    // let loader = new THREE.TextureLoader();\r\n    // let materials = [\r\n    //     new THREE.MeshBasicMaterial({map: loader.load('resources/images/flower-6.jpg')}),\r\n    //     new THREE.MeshBasicMaterial({map: loader.load('resources/images/flower-6.jpg')}),\r\n    //     new THREE.MeshBasicMaterial({map: loader.load('resources/images/flower-6.jpg')}),\r\n    //     new THREE.MeshBasicMaterial({map: loader.load('resources/images/flower-6.jpg')}),\r\n    //     new THREE.MeshBasicMaterial({map: loader.load('resources/images/flower-6.jpg')}),\r\n    //     new THREE.MeshBasicMaterial({map: loader.load('resources/images/flower-6.jpg')}),\r\n    // ];\r\n\r\n    let material = new THREE.MeshBasicMaterial({ color: 0x00ff00 }); // changes the color the 0x means #\r\n    let cube = new THREE.Mesh(geometry, material);\r\n\r\n    // let cube = new THREE.Mesh(geometry, materials);\r\n\r\n    scene.add(cube);\r\n    cubes.push(cube); // add to our list of cubes to rotate\r\n    camera.position.z = 5; // changes the position of the camera, higher the number the farther away the object is\r\n    let animate = function () {\r\n      requestAnimationFrame(animate);\r\n      cube.rotation.x += 0.01; // changes rotation left to right 0.00 only spins like a top\r\n      cube.rotation.y += 0.01; // changes rotation up to down 0.00 spins like a slinky\r\n      renderer.render(scene, camera);\r\n    };\r\n    animate();\r\n  }\r\n  render() {\r\n    return <div ref={(ref) => (this.mount = ref)} />;\r\n  }\r\n}\r\n\r\nexport default ThreeJS;\r\n","import React from \"react\";\nimport ThreeJS from \"./ThreeJS/ThreeJS\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThreeJS />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}